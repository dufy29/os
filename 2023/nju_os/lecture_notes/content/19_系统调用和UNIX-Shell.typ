#import "../template.typ": *
#pagebreak()
= Á≥ªÁªüË∞ÉÁî®Âíå UNIX Shell

#image("images/2023-12-06-20-05-05.png")

```sh
‚ùØ file /bin/ls
/bin/ls: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=897f49cafa98c11d63e619e7e40352f
855249c13, for GNU/Linux 3.2.0, stripped
‚ùØ ldd
ldd: missing file arguments
Try `ldd --help' for more information.
‚ùØ ldd /bin/ls
        linux-vdso.so.1 (0x00007ffe6d8c8000)
        libselinux.so.1 => /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007fb971cd2000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb971aaa000)
        libpcre2-8.so.0 => /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007fb971a13000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fb971d34000)
‚ùØ ldd /bin/busybox
        not a dynamic executable
```

== (UNIX) Shell

=== ‰∏∫Áî®Êà∑Â∞ÅË£ÖÊìç‰ΩúÁ≥ªÁªü API

Êàë‰ª¨ÈúÄË¶Å‰∏Ä‰∏™ ‚ÄúÁî®Êà∑ËÉΩÁõ¥Êé•Êìç‰Ωú‚Äù ÁöÑÁ®ãÂ∫èÁÆ°ÁêÜÊìç‰ΩúÁ≥ªÁªüÂØπË±°„ÄÇ

ÈúÄÊ±ÇÂàÜÊûê

- Êàë‰ª¨ÊØèÂ§©ÈÉΩÊãøÊìç‰ΩúÁ≥ªÁªüÂÅö‰ªÄ‰πàÔºü
  - ÂêØÂä®Â∫îÁî®Á®ãÂ∫è
    - Âç≥Êó∂ÈÄö‰ø°
    - ÂΩ±Èü≥Â®±‰πê
    - ...
- Êàë‰ª¨ÈúÄË¶Å‰∏Ä‰∏™Á®ãÂ∫èËÉΩÂçèË∞ÉÂ§ö‰∏™Â∫îÁî®Á®ãÂ∫è

=== ‰∏∫Áî®Êà∑Â∞ÅË£ÖÊìç‰ΩúÁ≥ªÁªü API

#image("images/2023-12-06-20-05-20.png")
Shell: Kernel ÁöÑ ‚ÄúÂ§ñÂ£≥‚Äù

- ‚Äú‰∏é‰∫∫Á±ªÁõ¥Êé•‰∫§‰∫íÁöÑÁ¨¨‰∏Ä‰∏™Á®ãÂ∫è‚Äù

=== The UNIX Shell

‚ÄúÁªàÁ´Ø‚Äù Êó∂‰ª£ÁöÑ‰ºüÂ§ßËÆæËÆ°; ‚ÄúCommand-line interface‚Äù (CLI) ÁöÑÂ∑ÖÂ≥∞

*Shell ÊòØ‰∏ÄÈó® ‚ÄúÊääÁî®Êà∑Êåá‰ª§ÁøªËØëÊàêÁ≥ªÁªüË∞ÉÁî®‚Äù ÁöÑÁºñÁ®ãËØ≠Ë®Ä*

- ÂéüÊù•Êàë‰ª¨‰∏ÄÁõ¥Âú®ÁºñÁ®ã
  - Áõ¥Âà∞Êúâ‰∫Ü Graphical Shell (GUI)
  - Windows, Gnome, Symbian, Android

=== ËÑæÊ∞îÊúâÁÇπÂ∞èÂè§ÊÄ™ÁöÑ UNIX ‰∏ñÁïå

‚ÄúUnix is user-friendly; it's just choosy about who its friends are.‚Äù

‰ΩÜÂ¶ÇÊûúÊää shell ÁêÜËß£ÊàêÁºñÁ®ãËØ≠Ë®ÄÔºå‚Äú‰∏çÂ•ΩÁî®‚Äù Â•ΩÂÉè‰πüÊ≤°‰ªÄ‰πàÊØõÁóÖ‰∫Ü ‰Ω†ËßÅËøáÂì™‰∏™ÁºñÁ®ãËØ≠Ë®Ä ‚ÄúÂ•ΩÁî®‚Äù ÁöÑÔºü

#tip("Tip")[
(UNIX ‰∏ñÁïåÊúâÂæàÂ§öÂéÜÂè≤ÈÅóÁïôÁ∫¶ÂÆö), Âú®ÂΩìÊó∂ÈÇ£‰∏™ÂæàÁ¥ßÂáëÁöÑËÆ°ÁÆóÂäõ‰∏ã, ÂÅö‰∫Ü‰∏Ä‰∏™Êó¢Êñπ‰æøÁºñËØëÂô®ÂÆûÁé∞, ÂèàÊØîËæÉÂ•ΩÁî®ÁöÑÂ¶•Âçè.
]

=== The Shell Programming Language

Âü∫‰∫éÊñáÊú¨ÊõøÊç¢ÁöÑÂø´ÈÄüÂ∑•‰ΩúÊµÅÊê≠Âª∫

- ÈáçÂÆöÂêë: `cmd > file < file 2> /dev/null`
- È°∫Â∫èÁªìÊûÑ: `cmd1; cmd2, cmd1 && cmd2, cmd1 || cmd2`
- ÁÆ°ÈÅì: `cmd1 | cmd2`
- È¢ÑÂ§ÑÁêÜ: `$()`, `<()`
- ÂèòÈáè/ÁéØÂ¢ÉÂèòÈáè„ÄÅÊéßÂà∂ÊµÅ‚Ä¶‚Ä¶

Job control

- Á±ªÊØîÁ™óÂè£ÁÆ°ÁêÜÂô®ÈáåÁöÑ ‚ÄúÂèâ‚Äù„ÄÅ‚ÄúÊúÄÂ∞èÂåñ‚Äù
- jobs, fg, bg, wait
- (‰ªäÂ§©ÁöÑ GUI Âπ∂Ê≤°ÊúâÊØî CLI Â§öÂÅöÂ§™Â§ö‰∫ã)

==== `ls -l | wc -l`

#image("images/2023-12-06-20-05-29.png")
shell ËØ≠Ë®ÄË°®ËææÂºèÁöÑÂÄºÊòØ‰ªÄ‰πàÂë¢? -> ÁøªËØëÊàêÁ≥ªÁªüË∞ÉÁî®. ÂÖàÂÅöÂ≠óÁ¨¶‰∏≤ÁöÑÈ¢ÑÁºñËØë,
Âü∫‰∫éÊñáÊú¨ÁöÑÊõøÊç¢. Ëß£ÊûêÊàêËØ≠Ê≥ïÊ†ë, ÊúÄÁªàÁøªËØëÊàêÁ≥ªÁªüË∞ÉÁî®ÁöÑÂ∫èÂàó.

#tip("Tip")[
shell ÊòØ kernel Âíå‰∫∫‰πãÈó¥ÁöÑÊ°•Ê¢Å
]

=== ‰∫∫Â∑•Êô∫ËÉΩÊó∂‰ª£ÔºåÊàë‰ª¨‰∏∫‰ªÄ‰πàËøòË¶ÅËØªÊâãÂÜåÔºü

‰ªäÂ§©ÁöÑ‰∫∫Â∑•Êô∫ËÉΩËøòÊòØ ‚ÄúË¢´Âä®‚Äù ÁöÑ

- ÂÆÉËøò‰∏çËÉΩÂæàÂ•ΩÂú∞ÂëäËØâ‰Ω†Ôºå‰Ω†Â∫îËØ•ÂéªÊâæ‰ªÄ‰πà
- Manual ÊòØ‰∏Ä‰∏™ complete source
  - ÂΩìÁÑ∂ÔºåAI ÂèØ‰ª•Â∏ÆÂä©‰Ω†Êõ¥Âø´ÈÄüÂú∞ÊµèËßàÊâãÂÜå„ÄÅÁêÜËß£Á®ãÂ∫èÁöÑË°å‰∏∫

Let's RTFM, with ChatGPT Copilot!

- man sh - command interpreter(Âº∫ÁÉàÊé®Ëçê!!!)
- Read the friendly manual üòÉ

==== ‰∏æ‰æã

dash ÈáåÁöÑ`-f`ÈÄâÈ°π: disable pathname expansion.

```sh
‚ùØ ls *
linux:
Makefile  init  minimal.S

sh:
Makefile  init.gdb  lib.h  sh.c  visualize.py
‚ùØ bash -c -f "ls *"
ls: cannot access '*': No such file or directory
```

‰æãÂ¶ÇÈáåÈù¢ÁöÑÈáçÂÆöÂêë:

```txt
Redirections
    Redirections are used to change where a command reads its input or sends its output.  In general, redirections open, close, or duplicate an existing reference to
    a file.  The overall format used for redirection is:

          [n] redir-op file

    where redir-op is one of the redirection operators mentioned previously.  Following is a list of the possible redirections.  The [n] is an optional number between
    0 and 9, as in ‚Äò3‚Äô (not ‚Äò[3]‚Äô), that refers to a file descriptor.

          [n]> file   Redirect standard output (or n) to file.
          [n]>| file  Same, but override the -C option.
          [n]>> file  Append standard output (or n) to file.
          [n]< file   Redirect standard input (or n) from file.
          [n1]<&n2    Copy file descriptor n2 as stdout (or fd n1).  fd n2.
          [n]<&-      Close standard input (or n).
          [n1]>&n2    Copy file descriptor n2 as stdin (or fd n1).  fd n2.
          [n]>&-      Close standard output (or n).
          [n]<> file  Open file for reading and writing on standard input (or n).
```

== Â§çÂàªÁªèÂÖ∏

=== A Zero-dependency UNIX Shell (from xv6)

Shell ÊòØ Kernel ‰πãÂ§ñÁöÑ ‚ÄúÂ£≥‚Äù

- ÂÆÉ‰πüÊòØ‰∏Ä‰∏™Áä∂ÊÄÅÊú∫ (Âêå minimal.S)
- ÂÆåÂÖ®Âü∫‰∫éÁ≥ªÁªüË∞ÉÁî® API

Êàë‰ª¨ÁßªÊ§ç‰∫Ü xv6 ÁöÑ shell

- Èõ∂Â∫ìÂáΩÊï∞‰æùËµñ (`-ffreestanding` ÁºñËØë„ÄÅ`ld` ÈìæÊé•)
- ÂèØ‰ª•‰Ωú‰∏∫ÊúÄÂ∞è Linux ÁöÑ `init` Á®ãÂ∫è

ÊîØÊåÅÁöÑÂäüËÉΩ

- ÈáçÂÆöÂêë/ÁÆ°ÈÅì `ls > a.txt, ls | wc -l`
- ÂêéÂè∞ÊâßË°å `ls &`
- ÂëΩ‰ª§ÁªÑÂêà `(echo a ; echo b) | wc -l`

=== ÈòÖËØª‰ª£Á†Å

Â∫îËØ•Â¶Ç‰ΩïÈòÖËØª xv6 shell ÁöÑ‰ª£Á†ÅÔºü

==== strace

- ÈÄÇÂΩìÁöÑÂàÜÂ±èÂíåËøáÊª§
- AI ‰ΩøÈòÖËØªÊñáÊ°£ÁöÑÊàêÊú¨Â§ßÂπÖÈôç‰Ωé

‰∏äÂ±è:`strace -f -o sh.log ./sh`
‰∏ãÂ±è:`tail -f sh.log`
#image("images/2023-12-06-20-09-47.png")

```sh
(sh-xv6) > /bin/ls
Makefile  init.gdb  lib.h  sh  sh.c  sh.log  sh.o  visualize.py
(sh-xv6) >
```

```log
13932 execve("./sh", ["./sh"], 0x7ffd5c673378 /* 67 vars */) = 0
13932 write(2, "(sh-xv6) > ", 11)       = 11
13932 read(0, "/", 1)                   = 1
13932 read(0, "b", 1)                   = 1
13932 read(0, "i", 1)                   = 1
13932 read(0, "n", 1)                   = 1
13932 read(0, "/", 1)                   = 1
13932 read(0, "l", 1)                   = 1
13932 read(0, "s", 1)                   = 1
13932 read(0, "\n", 1)                  = 1
13932 fork()                            = 13964
13964 execve("/bin/ls", ["/bin/ls"], NULL <unfinished ...>
13932 wait4(-1,  <unfinished ...>
13964 <... execve resumed>)             = 0
13964 brk(NULL)                         = 0x5558bf38a000
13964 arch_prctl(0x3001 /* ARCH_??? */, 0x7ffe83bf4cf0) = -1 EINVAL (Invalid argument)
13964 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f39e8d6b000
13964 access("/etc/ld.so.preload", R_OK) = -1 ENOENT (No such file or directory)
13964 openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
13964 newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=63055, ...}, AT_EMPTY_PATH) = 0
13964 mmap(NULL, 63055, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f39e8d5b000
13964 close(3)                          = 0
13964 openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libselinux.so.1", O_RDONLY|O_CLOEXEC) = 3
13964 read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0"..., 832) = 832
13964 newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=166280, ...}, AT_EMPTY_PATH) = 0
13964 mmap(NULL, 177672, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f39e8d2f000
13964 mprotect(0x7f39e8d35000, 139264, PROT_NONE) = 0
13964 mmap(0x7f39e8d35000, 106496, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x6000) = 0x7f39e8d35000
13964 mmap(0x7f39e8d4f000, 28672, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x20000) = 0x7f39e8d4f000
13964 mmap(0x7f39e8d57000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x27000) = 0x7f39e8d57000
13964 mmap(0x7f39e8d59000, 5640, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f39e8d59000
13964 close(3)                          = 0
13964 openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
13964 read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\237\2\0\0\0\0\0"..., 832) = 832
13964 pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
13964 pread64(3, "\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0"..., 48, 848) = 48
13964 pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0\244;\374\204(\337f#\315I\214\234\f\256\271\32"..., 68, 896) = 68
13964 newfstatat(3, "", {st_mode=S_IFREG|0755, st_size=2216304, ...}, AT_EMPTY_PATH) = 0
13964 pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
13964 mmap(NULL, 2260560, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f39e8b07000
13964 mmap(0x7f39e8b2f000, 1658880, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x28000) = 0x7f39e8b2f000
13964 mmap(0x7f39e8cc4000, 360448, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1bd000) = 0x7f39e8cc4000
13964 mmap(0x7f39e8d1c000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x214000) = 0x7f39e8d1c000
13964 mmap(0x7f39e8d22000, 52816, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f39e8d22000
13964 close(3)                          = 0
13964 openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libpcre2-8.so.0", O_RDONLY|O_CLOEXEC) = 3
13964 read(3, "\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\0\0\0\0\0\0\0\0"..., 832) = 832
13964 newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=613064, ...}, AT_EMPTY_PATH) = 0
13964 mmap(NULL, 615184, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f39e8a70000
13964 mmap(0x7f39e8a72000, 438272, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x2000) = 0x7f39e8a72000
13964 mmap(0x7f39e8add000, 163840, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x6d000) = 0x7f39e8add000
13964 mmap(0x7f39e8b05000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x94000) = 0x7f39e8b05000
13964 close(3)                          = 0
13964 mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f39e8a6d000
13964 arch_prctl(ARCH_SET_FS, 0x7f39e8a6d800) = 0
13964 set_tid_address(0x7f39e8a6dad0)   = 13964
13964 set_robust_list(0x7f39e8a6dae0, 24) = 0
13964 rseq(0x7f39e8a6e1a0, 0x20, 0, 0x53053053) = 0
13964 mprotect(0x7f39e8d1c000, 16384, PROT_READ) = 0
13964 mprotect(0x7f39e8b05000, 4096, PROT_READ) = 0
13964 mprotect(0x7f39e8d57000, 4096, PROT_READ) = 0
13964 mprotect(0x5558bdeec000, 4096, PROT_READ) = 0
13964 mprotect(0x7f39e8da5000, 8192, PROT_READ) = 0
13964 prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
13964 munmap(0x7f39e8d5b000, 63055)     = 0
13964 statfs("/sys/fs/selinux", 0x7ffe83bf4d30) = -1 ENOENT (No such file or directory)
13964 statfs("/selinux", 0x7ffe83bf4d30) = -1 ENOENT (No such file or directory)
13964 getrandom("\x07\x2f\x24\xe8\x5d\xe2\x34\x76", 8, GRND_NONBLOCK) = 8
13964 brk(NULL)                         = 0x5558bf38a000
13964 brk(0x5558bf3ab000)               = 0x5558bf3ab000
13964 openat(AT_FDCWD, "/proc/filesystems", O_RDONLY|O_CLOEXEC) = 3
13964 newfstatat(3, "", {st_mode=S_IFREG|0444, st_size=0, ...}, AT_EMPTY_PATH) = 0
13964 read(3, "nodev\tsysfs\nnodev\ttmpfs\nnodev\tbd"..., 1024) = 478
13964 read(3, "", 1024)                 = 0
13964 close(3)                          = 0
13964 access("/etc/selinux/config", F_OK) = -1 ENOENT (No such file or directory)
13964 ioctl(1, TCGETS, {B38400 opost isig icanon echo ...}) = 0
13964 ioctl(1, TIOCGWINSZ, {ws_row=26, ws_col=192, ws_xpixel=3072, ws_ypixel=832}) = 0
13964 openat(AT_FDCWD, ".", O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY) = 3
13964 newfstatat(3, "", {st_mode=S_IFDIR|0755, st_size=4096, ...}, AT_EMPTY_PATH) = 0
13964 getdents64(3, 0x5558bf38f920 /* 10 entries */, 32768) = 280
13964 getdents64(3, 0x5558bf38f920 /* 0 entries */, 32768) = 0
13964 close(3)                          = 0
13964 newfstatat(1, "", {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x4), ...}, AT_EMPTY_PATH) = 0
13964 write(1, "Makefile  init.gdb  lib.h  sh  s"..., 64) = 64
13964 close(1)                          = 0
13964 close(2)                          = 0
13964 exit_group(0)                     = ?
13964 +++ exited with 0 +++
13932 <... wait4 resumed>NULL, 0, NULL) = 13964
13932 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=13964, si_uid=1000, si_status=0, si_utime=0, si_stime=1} ---
13932 write(2, "(sh-xv6) > ", 11)       = 11
```

==== gdb

- AskGPT: How to debug a process that forks children processes in gdb?
  - AI ‰πüÂèØ‰ª•Â∏Æ‰Ω†Ëß£Èáä (‰∏çÁî®ÂéªÊ∑òÊñáÊ°£‰∫Ü)
- ‰ª•ÂèäÔºåÂÆöÂà∂ÁöÑ visualization
  - ÂØπ‰∫é ShellÔºåÊàë‰ª¨Â∫îËØ•ÊòæÁ§∫‰ªÄ‰πàÔºü

init.gdb

```gdb
set follow-fork-mode child
set detach-on-fork off
set follow-exec-mode same
set confirm off
set pagination off
source visualize.py
break _start
run
n 2
define hook-stop
    pdump
end
```

1. `set follow-fork-mode child`: ËÆæÁΩÆÂú®Á®ãÂ∫èË∞ÉÁî®`fork()`Á≥ªÁªüË∞ÉÁî®Êó∂Â¶Ç‰ΩïË∑üË∏™Â≠êËøõÁ®ã„ÄÇchildÂèÇÊï∞Ë°®Á§∫Âú®Â≠êËøõÁ®ã‰∏≠ÁªßÁª≠Ë∞ÉËØïÔºåËÄå‰∏çÊòØÁà∂ËøõÁ®ã„ÄÇ
2. `set detach-on-fork off`: ËÆæÁΩÆÂú®Á®ãÂ∫èË∞ÉÁî®`fork()`Á≥ªÁªüË∞ÉÁî®Êó∂ÊòØÂê¶Ëá™Âä®ËÑ±Á¶ªÂΩìÂâçËøõÁ®ãÂπ∂ÈôÑÂä†Âà∞Êñ∞ÂàõÂª∫ÁöÑÂ≠êËøõÁ®ã„ÄÇoffË°®Á§∫‰∏çËá™Âä®ËÑ±Á¶ª„ÄÇ
3. `set follow-exec-mode same`: ËÆæÁΩÆÂú®Á®ãÂ∫èË∞ÉÁî®`exec()`Á≥ªÁªüË∞ÉÁî®Êó∂Â¶Ç‰ΩïË∑üË∏™ÊâßË°åÁöÑÊñ∞Á®ãÂ∫è„ÄÇsameË°®Á§∫ÁªßÁª≠Ë∑üË∏™Áé∞ÊúâËøõÁ®ãÔºåËÄå‰∏çÊòØÂêØÂä®Êñ∞ÁöÑË∞ÉËØï‰ºöËØù„ÄÇ
4. `set confirm off`:
  ËÆæÁΩÆGDBÂú®ÂÖ≥ÈîÆÊìç‰ΩúÔºà‰æãÂ¶ÇÂà†Èô§Êñ≠ÁÇπÔºâ‰πãÂâçÊòØÂê¶ÈúÄË¶ÅÁ°ÆËÆ§„ÄÇoffË°®Á§∫‰∏çÈúÄË¶ÅÁ°ÆËÆ§„ÄÇ
5. `set pagination off`: ËÆæÁΩÆGDBÊòØÂê¶ÂàÜÈ°µÊòæÁ§∫ËæìÂá∫„ÄÇoffË°®Á§∫Á¶ÅÁî®ÂàÜÈ°µ„ÄÇ
6. `source visualize.py`:
  Âä†ËΩΩÂêç‰∏∫visualize.pyÁöÑPythonËÑöÊú¨Êñá‰ª∂ÔºåÁî®‰∫éÂèØËßÜÂåñÁ®ãÂ∫èÁöÑÁä∂ÊÄÅ„ÄÇ
7. `break _start`: Âú®Á®ãÂ∫èÁöÑ`_start`ÂáΩÊï∞Â§ÑËÆæÁΩÆÊñ≠ÁÇπ„ÄÇ
8. `run`: ÂêØÂä®Á®ãÂ∫èÂπ∂ÂºÄÂßãË∞ÉËØï‰ºöËØù„ÄÇ
9. `n 2`: ËøêË°å‰∏§Ê¨°Á®ãÂ∫èÔºåÂç≥Ë∑≥Ëøá‰∏§Ë°å‰ª£Á†Å„ÄÇ
10. `define hook-stop pdump end`:
  ÂÆö‰πâÂΩìÁ®ãÂ∫èÂÅúÊ≠¢Êó∂ÊâßË°åÁöÑÂëΩ‰ª§„ÄÇËøôÈáåÂÆö‰πâ‰∫Ü‰∏Ä‰∏™Âêç‰∏∫pdumpÁöÑËá™ÂÆö‰πâÂëΩ‰ª§ÔºåÂÆÉÂ∞ÜËæìÂá∫Á®ãÂ∫èÁöÑÁä∂ÊÄÅ„ÄÇ

Ëøô‰∫õÂëΩ‰ª§ÂíåËÆæÁΩÆÊó®Âú®ÊîπÂñÑGDBË∞ÉËØï‰ºöËØù‰∏≠ÁöÑ‰∫§‰∫íÊÄßÂíåÂèØËßÜÂåñ„ÄÇ‰æãÂ¶ÇÔºåËÆæÁΩÆË∑üË∏™Ê®°Âºè‰∏∫childÂíåÁ¶ÅÁî®Ëá™Âä®ÂàÜÈ°µÊòæÁ§∫ÂèØ‰ª•Êõ¥Â•ΩÂú∞Ë∑üË∏™Á®ãÂ∫èÁä∂ÊÄÅÔºåËÄåËá™ÂÆö‰πâÂëΩ‰ª§pdumpÂèØ‰ª•Âø´ÈÄüÊü•ÁúãÁ®ãÂ∫èÁöÑÁä∂ÊÄÅ„ÄÇ

=== ÁêÜËß£ÁÆ°ÈÅì

#image("images/2023-11-27-13-55-21.png")

== Â±ïÊúõÊú™Êù•

=== UNIX Shell: Traps and Pitfalls

Âú® ‚ÄúËá™ÁÑ∂ËØ≠Ë®Ä‚Äù„ÄÅ‚ÄúÊú∫Âô®ËØ≠Ë®Ä‚Äù Âíå ‚Äú1970s ÁöÑÁÆóÂäõ‚Äù ‰πãÈó¥ËææÂà∞‰ºòÈõÖÁöÑÂπ≥Ë°°

- Âπ≥Ë°°ÊÑèÂë≥ÁùÄÂπ∂‰∏çÊÄªÊòØÂÆåÁæé
- Êìç‰ΩúÁöÑ ‚Äú‰ºòÂÖàÁ∫ß‚ÄùÔºü
  - `ls > a.txt | cat`
    - ÊàëÂ∑≤ÁªèÈáçÂÆöÂêëÁªô a.txt ‰∫ÜÔºåcat ÊòØ‰∏çÊòØÂ∞±Êî∂‰∏çÂà∞ËæìÂÖ•‰∫ÜÔºü
  - bash/zsh ÁöÑË°å‰∏∫ÊòØ‰∏çÂêåÁöÑ
    - ÊâÄ‰ª•ËÑöÊú¨‰∏ÄËà¨ÈÉΩÊòØ `#!/bin/bash` ÁîöËá≥ `#!/bin/sh` ‰øùÊåÅÂÖºÂÆπ
- ÊñáÊú¨Êï∞ÊçÆ ‚ÄúË¥£‰ªªËá™Ë¥ü‚Äù
  - ÊúâÁ©∫Ê†ºÔºüÂêéÊûúËá™Ë¥üÔºÅ
  - (PowerShell: ÊàëÊúâ object stream pipe ÂïäÂñÇ)

=== Âè¶‰∏Ä‰∏™ÊúâË∂£ÁöÑ‰æãÂ≠ê

```
$ echo hello > /etc/a.txt
bash: /etc/a.txt: Permission denied

$ sudo echo hello > /etc/a.txt
bash: /etc/a.txt: Permission denied
```

=== Â±ïÊúõÊú™Êù•

Open question: Êàë‰ª¨ËÉΩÂê¶‰ªéÊ†πÊú¨‰∏äÊîπÂèòÁÆ°ÁêÜÊìç‰ΩúÁ≥ªÁªüÁöÑÊñπÂºèÔºü

ÈúÄÊ±ÇÂàÜÊûê

- Fast Path: ÁÆÄÂçï‰ªªÂä°
  - Â∞ΩÂèØËÉΩÂø´
  - 100% ÂáÜÁ°Æ
- Slow Path: Â§çÊùÇ‰ªªÂä°
  - ‰ªªÂä°ÊèèËø∞Êú¨Ë∫´Â∞±ÂèØËÉΩÂæàÈïø
  - ÈúÄË¶Å ‚ÄúÁºñÁ®ã‚Äù

=== Êú™Êù•ÁöÑ Shell

Ëá™ÁÑ∂‰∫§‰∫í/ËÑëÊú∫Êé•Âè£ÔºöÂøÉÊÉ≥‰∫ãÊàê

- Shell Â∞±Êàê‰∏∫‰∫Ü‰∏Ä‰∏™Â∫îÁî®Á®ãÂ∫èÁöÑ‰∫§‰∫íÂ∫ì
  - UNIX Shell ÊòØ ‚ÄúËá™ÁÑ∂ËØ≠Ë®Ä‚Äù„ÄÅ‚ÄúÊú∫Âô®ËØ≠Ë®Ä‚Äù ‰πãÈó¥ÁöÑËæπÁºòÂú∞Â∏¶

Á≥ªÁªüÁÆ°ÁêÜ‰∏éËØ≠Ë®ÄÊ®°Âûã

- fish, zsh, #link("https://www.warp.dev/")[ Warp ], ...
- Stackoverflow, tldr, #link("https://github.com/nvbn/thefuck")[ thef\*\*k ] (Ëá™Âä®‰øÆÂ§ç)
- Command palette of vscode (Ctrl-Shift-P)
- Predictable
  - ÊµÅÁ®ãÂæàÂø´ (Êó†ÈúÄÊ£ÄÊü•)Ôºå‰ΩÜÂèØËÉΩÁäØÂÇª
- Creative
  - Áªô‰Ω†ÊÉäÂñúÔºå‰ΩÜÂÅ∂Â∞îÁäØÈîô
